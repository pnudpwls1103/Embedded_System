/*
 *********************************************************************************************************
 *                                              EXAMPLE CODE
 *
 *                             (c) Copyright 2013; Micrium, Inc.; Weston, FL
 *
 *                   All rights reserved.  Protected by international copyright laws.
 *                   Knowledge of the source code may not be used to write a similar
 *                   product.  This file may only be used in accordance with a license
 *                   and should not be redistributed in any way.
 *********************************************************************************************************
 */

/*
 *********************************************************************************************************
 *
 *                                            EXAMPLE CODE
 *
 *                                       IAR Development Kits
 *                                              on the
 *
 *                                    STM32F429II-SK KICKSTART KIT
 *
 * Filename      : app.c
 * Version       : V1.00
 * Programmer(s) : YS
 *                 DC
 *********************************************************************************************************
 */

/*
 *********************************************************************************************************
 *                                             INCLUDE FILES
 *********************************************************************************************************
 */

#include  <includes.h>
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx.h"
/*
 *********************************************************************************************************
 *                                            LOCAL DEFINES
 *********************************************************************************************************
 */

#define  APP_TASK_EQ_0_ITERATION_NBR              16u
/*
 *********************************************************************************************************
 *                                            TYPES DEFINITIONS
 *********************************************************************************************************
 */
typedef enum {
	TASK_OUTPUT,
	TASK_PWM,
	TASK_USART,
	TASK_PWDINPUT,
	TASK_BUTTON,


	TASK_N
} task_e;
typedef struct {
	CPU_CHAR* name;
	OS_TASK_PTR func;
	OS_PRIO prio;
	CPU_STK* pStack;
	OS_TCB* pTcb;
	OS_MSG_QTY qsize;
} task_t;

/*
 *********************************************************************************************************
 *                                         FUNCTION PROTOTYPES
 *********************************************************************************************************
 */
static void AppTaskStart(void *p_arg);
static void AppTaskCreate(void);
static void AppObjCreate(void);

static void AppTask_OUTPUT(void *p_arg);
static void AppTask_PWM(void *p_arg);
static void AppTask_USART(void *p_arg);
static void AppTask_PWDInput(void *p_arg);
static void AppTask_Button(void *p_arg);

static void Setup_Gpio(void);
static void TimConfiguration(void);
static void ControlPWM(int PWM);

/*
 *********************************************************************************************************
 *                                       LOCAL GLOBAL VARIABLES
 *********************************************************************************************************
 */
/* ----------------- APPLICATION GLOBALS -------------- */
static OS_TCB AppTaskStartTCB;
static CPU_STK AppTaskStartStk[APP_CFG_TASK_START_STK_SIZE];

static OS_TCB Task_OUTPUT_TCB;
static OS_TCB Task_PWM_TCB;
static OS_TCB Task_USART_TCB;
static OS_TCB Task_PWDInput_TCB;
static OS_TCB Task_Button_TCB;

static CPU_STK Task_OUTPUT_Stack[APP_CFG_TASK_START_STK_SIZE];
static CPU_STK Task_PWM_Stack[APP_CFG_TASK_START_STK_SIZE];
static CPU_STK Task_USART_Stack[APP_CFG_TASK_START_STK_SIZE];
static CPU_STK Task_PWDInput_Stack[APP_CFG_TASK_START_STK_SIZE];
static CPU_STK Task_Button_Stack[APP_CFG_TASK_START_STK_SIZE];

task_t cyclic_tasks[TASK_N] = {
		{ "Task_OUTPUT", AppTask_OUTPUT, 1, &Task_OUTPUT_Stack[0], &Task_OUTPUT_TCB, 1 },
//		{ "Task_PWM", AppTask_PWM, 3, &Task_OUTPUT_Stack[0], &Task_OUTPUT_TCB, 1 },
		{ "Task_USART", AppTask_USART, 2, &Task_USART_Stack[0], &Task_USART_TCB, 1 },
		{ "Task_PWDInput" , AppTask_PWDInput,  0, &Task_PWDInput_Stack[0] , &Task_PWDInput_TCB, 0},
//		{ "Task_BUTTON", AppTask_Button, 0, &Task_Button_Stack[0], &Task_Button_TCB, 0 },
};

OS_SEM	MySem;

int password[4] = { 0, 1, 0, 1 };
int pwd_in = 0;
int input;

/* ------------ FLOATING POINT TEST TASK -------------- */
/*
 *********************************************************************************************************
 *                                                main()
 *
 * Description : This is the standard entry point for C code.  It is assumed that your code will call
 *               main() once you have performed all necessary initialization.
 *
 * Arguments   : none
 *
 * Returns     : none
 *********************************************************************************************************
 */

int main(void) {
	OS_ERR err;

	/* Basic Init */
	RCC_DeInit();
//    SystemCoreClockUpdate();
	Setup_Gpio();
	TimConfiguration();

	/* BSP Init */
	BSP_IntDisAll(); /* Disable all interrupts.                              */

	CPU_Init(); /* Initialize the uC/CPU Services                       */
	Mem_Init(); /* Initialize Memory Management Module                  */
	Math_Init(); /* Initialize Mathematical Module                       */

	/* OS Init */
	OSInit(&err); /* Init uC/OS-III.                                      */

    OSSemCreate(&MySem,
    			"My Semaphore",
				1,
				&err);

	OSTaskCreate(
			(OS_TCB *) &AppTaskStartTCB, /* Create the start task                                */
			(CPU_CHAR *) "App Task Start",
			(OS_TASK_PTR) AppTaskStart, (void *) 0u,
			(OS_PRIO) APP_CFG_TASK_START_PRIO,
			(CPU_STK *) &AppTaskStartStk[0u],
			(CPU_STK_SIZE) AppTaskStartStk[APP_CFG_TASK_START_STK_SIZE / 10u],
			(CPU_STK_SIZE) APP_CFG_TASK_START_STK_SIZE,
			(OS_MSG_QTY) 0u,
			(OS_TICK) 0u,
			(void *) 0u,
			(OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR ),
			(OS_ERR *) &err
	);

	OSStart(&err); /* Start multitasking (i.e. give control to uC/OS-III). */

	(void) &err;

	return (0u);
}
/*
 *********************************************************************************************************
 *                                          STARTUP TASK
 *
 * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
 *               initialize the ticker only once multitasking has started.
 *
 * Arguments   : p_arg   is the argument passed to 'AppTaskStart()' by 'OSTaskCreate()'.
 *
 * Returns     : none
 *
 * Notes       : 1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
 *                  used.  The compiler should not generate any code for this statement.
 *********************************************************************************************************
 */
static void AppTaskStart(void *p_arg) {
	OS_ERR err;

	(void) p_arg;

	BSP_Init(); /* Initialize BSP functions                             */
	BSP_Tick_Init(); /* Initialize Tick Services.                            */

#if OS_CFG_STAT_TASK_EN > 0u
	OSStatTaskCPUUsageInit(&err); /* Compute CPU capacity with no task running            */
#endif

#ifdef CPU_CFG_INT_DIS_MEAS_EN
	CPU_IntDisMeasMaxCurReset();
#endif

	BSP_LED_Off(0u);                                            /* Turn Off LEDs after initialization                   */

	APP_TRACE_DBG(("Creating Application Kernel Objects\n\r"));
	AppObjCreate(); /* Create Applicaiton kernel objects                    */

	APP_TRACE_DBG(("Creating Application Tasks\n\r"));
	AppTaskCreate(); /* Create Application tasks                             */
}

/*
 *********************************************************************************************************
 *                                          AppTask
 *********************************************************************************************************
 */

static void AppTask_OUTPUT(void *p_arg) {
	OS_ERR err;
	OS_MSG_SIZE msg_size;
	CPU_TS ts;

	uint32_t idx = 0;
	uint32_t buttonNum = 0;
	while (DEF_TRUE) { /* Task body, always written as an infinite loop.       */
		buttonNum = (int)OSTaskQPend(0,
									OS_OPT_PEND_BLOCKING,
									&msg_size,
									&ts,
									&err);

		if(buttonNum) {
			ControlPWM(1000);
			GPIO_ResetBits(GPIOE, GPIO_Pin_9);
			GPIO_SetBits(GPIOE, GPIO_Pin_11);
			GPIO_ResetBits(GPIOE, GPIO_Pin_13);
		}
		else {
			ControlPWM(2000);
			GPIO_SetBits(GPIOE, GPIO_Pin_9);
			GPIO_SetBits(GPIOE, GPIO_Pin_13);
			GPIO_ResetBits(GPIOE, GPIO_Pin_11);
		}
	}
}

static void AppTask_PWDInput(void *p_arg)
{
	OS_ERR  err;
	CPU_TS	ts;
	int flag = 0;
	int prev = 2;

	int c = 2;
	while(DEF_TRUE){
		switch(err) {
		case OS_ERR_NONE:
			prev = flag;
			flag = GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_2) || GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_3);

			OSSemPend(&MySem,
						0,
						OS_OPT_PEND_BLOCKING,
						&ts,
						&err);

			if(prev != flag && flag) {
				if(GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_2))
				{
					c = 0;
				}
				else if(GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_3))
				{
					c = 1;
				}

				OSTaskQPost(&Task_USART_TCB,
							(void*)c,
							sizeof(c),
							OS_OPT_POST_FIFO,
							&err);
			}
			else {
				c = 2;
			}

			OSSemPost(&MySem,
					OS_OPT_POST_1,
					&err);
//			else
//			{
//				c = 2;
//				if(!GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_1))
//				{
//					flag = 0;
//				}
//			}
			break;
		case OS_ERR_PEND_ABORT:
			break;
		case OS_ERR_OBJ_DEL:
			break;
		default:
			break;
		}

		OSTimeDlyHMSM(0u, 0u, 0u, 100u,
				OS_OPT_TIME_HMSM_STRICT,
				&err);
	}
}

static void AppTask_Button(void *p_arg) {
	OS_ERR err;

	int	button;
	while (DEF_TRUE) { /* Task body, always written as an infinite loop.       */
		//button = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
		button = GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_2);

		OSTaskQPost(&Task_OUTPUT_TCB,
					(void*)button,
					sizeof(button),
					OS_OPT_POST_FIFO,
					&err);

		OSTimeDlyHMSM(0u, 0u, 0u, 100u,
				OS_OPT_TIME_HMSM_STRICT, &err);
	}
}

static void AppTask_USART(void *p_arg) {
	OS_ERR  err;
	OS_MSG_SIZE msg_size;
	CPU_TS ts;

	int i = 0;
	int wrong_flag = 0;

	USART_SendData(Nucleo_COM1, 42);
	send_string("\n\rEnter your password \n\r* \n\r \n\r");

	while(DEF_TRUE){
		input = (int)OSTaskQPend(0,
								OS_OPT_PEND_BLOCKING,
								&msg_size,
								&ts,
								&err);

		switch(err) {
		case OS_ERR_NONE:
			USART_SendData(Nucleo_COM1, input + '0');
			send_string("\n\r");
			USART_SendData(Nucleo_COM1, i + '0');

			//USART_SendData(Nucleo_COM1, 42);

			if(input != password[i])
			{
				wrong_flag = 1;
			}
			i++;

			if(i == 4)
			{
				if(wrong_flag != 1) {
					send_string("\n\rcorrect \n\r \n\r \n\r");
				}
				else {
					send_string("\n\rwrong \n\r \n\r \n\r");
				}

				i = 0;
				wrong_flag = 0;
			}

			break;
		case OS_ERR_PEND_ABORT:
			break;
		case OS_ERR_OBJ_DEL:
			break;
		default:
			break;
		}
	}
}

/*
 *********************************************************************************************************
 *                                          AppTaskCreate()
 *
 * Description : Create application tasks.
 *
 * Argument(s) : none
 *
 * Return(s)   : none
 *
 * Caller(s)   : AppTaskStart()
 *
 * Note(s)     : none.
 *********************************************************************************************************
 */

static void AppTaskCreate(void) {
	OS_ERR err;

	u8_t idx = 0;
	task_t* pTask_Cfg;
	for (idx = 0; idx < TASK_N; idx++) {
		pTask_Cfg = &cyclic_tasks[idx];

		OSTaskCreate(
				pTask_Cfg->pTcb,
				pTask_Cfg->name,
				pTask_Cfg->func,
				(void *) 0u,
				pTask_Cfg->prio,
				pTask_Cfg->pStack,
				pTask_Cfg->pStack[APP_CFG_TASK_START_STK_SIZE / 10u],
				APP_CFG_TASK_START_STK_SIZE,
				(OS_MSG_QTY) pTask_Cfg->qsize,
				(OS_TICK) 0u,
				(void *) 0u,
				(OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR ),
				(OS_ERR *) &err);
	}
}

/*
 *********************************************************************************************************
 *                                          AppObjCreate()
 *
 * Description : Create application kernel objects tasks.
 *
 * Argument(s) : none
 *
 * Return(s)   : none
 *
 * Caller(s)   : AppTaskStart()
 *
 * Note(s)     : none.
 *********************************************************************************************************
 */

static void AppObjCreate(void) {

}

/*
 *********************************************************************************************************
 *                                          Setup_Gpio()
 *
 * Description : Configure LED GPIOs directly
 *
 * Argument(s) : none
 *
 * Return(s)   : none
 *
 * Caller(s)   : AppTaskStart()
 *
 * Note(s)     :
 *              LED1 PB0
 *              LED2 PB7
 *              LED3 PB14
 *
 *********************************************************************************************************
 */
static void Setup_Gpio(void) {
	GPIO_InitTypeDef gpio_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	RCC_AHB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	gpio_init.GPIO_Mode = GPIO_Mode_OUT;
	gpio_init.GPIO_OType = GPIO_OType_PP;
	gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
	gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	gpio_init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_7 | GPIO_Pin_14;

	GPIO_Init(GPIOB, &gpio_init);

	gpio_init.GPIO_Mode = GPIO_Mode_IN;
	gpio_init.GPIO_PuPd = GPIO_PuPd_DOWN;
	gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
	gpio_init.GPIO_Pin = GPIO_Pin_13;

	GPIO_Init(GPIOC, &gpio_init);

	gpio_init.GPIO_Mode = GPIO_Mode_AF;
	gpio_init.GPIO_OType = GPIO_OType_PP;
	gpio_init.GPIO_Speed = GPIO_Speed_100MHz;
	gpio_init.GPIO_PuPd = GPIO_PuPd_UP;
	gpio_init.GPIO_Pin = GPIO_Pin_8;

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM3);
	GPIO_Init(GPIOC, &gpio_init);

	gpio_init.GPIO_Mode = GPIO_Mode_OUT;
	gpio_init.GPIO_OType = GPIO_OType_PP;
	gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
	gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	gpio_init.GPIO_Pin = GPIO_Pin_2;

	GPIO_Init(GPIOD, &gpio_init);

	gpio_init.GPIO_Mode = GPIO_Mode_OUT;
	gpio_init.GPIO_OType = GPIO_OType_PP;
	gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
	gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	gpio_init.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13;

	GPIO_Init(GPIOE, &gpio_init);

	gpio_init.GPIO_Mode = GPIO_Mode_IN;
	gpio_init.GPIO_PuPd = GPIO_PuPd_DOWN;
	gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
	gpio_init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;

	GPIO_Init(GPIOG, &gpio_init);
}

static void TimConfiguration(void) {
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_OCInitTypeDef TIM_OCInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = 20000;
	TIM_TimeBaseStructure.TIM_Prescaler = 72;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 1500;
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
	TIM_ARRPreloadConfig(TIM3, ENABLE);
	TIM_Cmd(TIM3, ENABLE);

	NVIC_EnableIRQ(TIM3_IRQn);
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

static void ControlPWM(int PWM) {
        TIM_OCInitTypeDef       TIM_OCInitStructure;

        TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
        TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
        TIM_OCInitStructure.TIM_Pulse = PWM;
        TIM_OC3Init(TIM3, &TIM_OCInitStructure);
}
